{"version":3,"sources":["components/ConversationList/ConversationList.js","components/Connection/Connection.js","components/Conversation/Conversation.js","components/Signature/Signature.js","App.js","serviceWorker.js","index.js"],"names":["ConversationList","props","state","targetConversation","value","bodyObject","JSON","stringify","file","newName","fetch","headers","Accept","body","method","e","charCode","preventDefault","this","frontendRenamer","target","console","log","conversations","filter","c","id","placeholder","backendRenamer","newConversations","index","indexOf","splice","setState","stopPropagation","displayName","parentElement","firstChild","fileName","conversationDeleter","Date","now","toString","slice","push","content","lastMutation","conversationName","starToggler","conversation","onRouteChange","star","className","onClick","buttonClick","map","i","localStorage","getItem","key","rowClick","clickStopper","onSubmit","handleSubmit","aria-label","maxLength","type","onBlur","onKeyPress","handleKeyPress","alt","src","openUp","React","Component","webSocket","WebSocket","connection","sharedb","Connection","Conversation","handleInput","bind","textArea","createRef","text","op","route","Object","keys","includes","p","si","sd","mutation","ReactDOM","findDOMNode","current","stringData","doc","get","on","opHandler","subscribe","err","data","callback","create","createIfNeeded","StringBinding","setup","currentConversation","conv","textEntered","spanStyle","starClick","style","color","ref","defaultValue","Signature","display","justifyContent","rel","href","App","handleUpdate","starStatus","setItem","axios","forEach","concat","getConversations","Boolean","window","location","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2ca5794f.chunk.js","sourcesContent":["import React from \"react\";\n\nclass ConversationList extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      props,\n    };\n  }\n\n  // renaming conversations on the backend\n  async backendRenamer(targetConversation, value) {\n    const bodyObject = JSON.stringify({\n      file: targetConversation,\n      newName: value,\n    });\n    return await fetch(\"https://ava-backend.herokuapp.com/conversations\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n      body: bodyObject,\n      method: \"PUT\",\n    });\n  }\n\n  // if user presses enter,\n  // proceed to change convo name\n  handleKeyPress(e) {\n    if (e.charCode === 13) {\n      e.preventDefault();\n      this.frontendRenamer(e);\n    }\n  }\n\n  // changing the convo name\n  // on the frontend\n  frontendRenamer(e) {\n    // IF NO USER INPUT\n    // --> BREAK\n    if (e.target.value === \"\") {\n      return console.log(\"no input\");\n    }\n    // shallow copy of conversations array\n    let conversations = [...this.props.conversations];\n\n    // filtering the copy, for the conversation\n    // we're trying to edit\n    let targetConversation = conversations.filter(\n      (c) => c.id === e.target.placeholder\n    );\n\n    e.target.placeholder = e.target.value;\n\n    // firing the rename function, while our\n    // data is freshly targeted\n    this.backendRenamer(targetConversation, e.target.value);\n\n    targetConversation[0].id = e.target.placeholder;\n    // setting our target conversation's id to\n    // to the new name\n\n    return (e.target.value = \"\");\n  }\n\n  // delete conversations from frontend\n  conversationDeleter(file) {\n    // shallow copy of conversations...\n    // ...just in case\n    const newConversations = [...this.props.conversations];\n\n    // filtering the copy, for the conversation\n    // we're trying to delete\n    let targetConversation = newConversations.filter((c) => c.id === file);\n\n    // checking if element is in\n    // conversations array\n    const index = newConversations.indexOf(targetConversation[0]);\n\n    // mutating the array with a splice\n    this.props.conversations.splice(index, 1);\n\n    // using the index to splice\n    // our conversation array\n    this.setState({ conversations: this.props.conversations });\n  }\n\n  // prevents clicks from\n  // bubbling up to rowClick event;\n  clickStopper(e) {\n    e.stopPropagation();\n  }\n\n  async buttonClick(e) {\n    e.stopPropagation();\n    if (e.target.id === \"delete\") {\n      const displayName =\n        e.target.parentElement.parentElement.firstChild.firstChild[0]\n          .placeholder;\n      let targetConversation = this.props.conversations.filter(\n        (c) => c.id === displayName\n      );\n      const bodyObject = JSON.stringify({\n        file: targetConversation[0].fileName,\n      });\n\n      // reflect deletion in frontend\n      this.conversationDeleter(displayName);\n\n      // delete it on the backend\n      return await fetch(\"https://ava-backend.herokuapp.com/conversations\", {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n        body: bodyObject,\n        method: \"DELETE\",\n      });\n    } else if (e.target.id === \"new\") {\n      const fileName = \"NewConversation\" + Date.now().toString().slice(10);\n      const id = fileName;\n\n      this.setState({\n        conversations: this.props.conversations.push({\n          id: id,\n          fileName: `${fileName}.json`,\n          content: \"\",\n          lastMutation: \"\",\n        }),\n      });\n      const bodyObject = JSON.stringify({ file: fileName });\n      await fetch(\"https://ava-backend.herokuapp.com/conversations\", {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n        body: bodyObject,\n        method: \"POST\",\n      });\n      return this.setState({ conversations: this.props.conversations });\n    } else {\n      const conversationName =\n        e.target.parentElement.parentElement.firstChild.firstChild[0]\n          .placeholder;\n      return this.props.starToggler(conversationName);\n    }\n  }\n\n  rowClick(e) {\n    const conversation = e.target.firstChild.firstChild.firstChild.placeholder;\n    return this.props.onRouteChange(conversation);\n  }\n\n  openUp(e) {\n    const conversation =\n      e.target.parentElement.parentElement.firstChild.firstChild.firstChild\n        .placeholder;\n    return this.props.onRouteChange(conversation);\n  }\n\n  render() {\n    let conversations = this.props.conversations;\n    let star;\n    return (\n      <div className=\"container conv-list-container\">\n        <div className=\"row conv-list-ops-row\">\n          <div className=\"column conv-list-ops-column\">\n            <button\n              onClick={(e) => {\n                this.buttonClick(e);\n              }}\n              id=\"new\"\n              className=\"new-button\"\n            >\n              New+\n            </button>\n          </div>\n        </div>\n        <div className=\"column conv-list-column\">\n          {conversations.map((conversation, i) => {\n            if (localStorage.getItem(`${conversation.id}-star`)) {\n              star = localStorage.getItem(`${conversation.id}-star`);\n            } else {\n              star = \"star.svg\";\n            }\n            return (\n              <div\n                className=\"row conv-list-row\"\n                key={`${i}`}\n                onClick={(e) => this.rowClick(e)}\n              >\n                <div\n                  className=\"column conv-title-column\"\n                  onClick={(e) => {\n                    this.clickStopper(e);\n                  }}\n                >\n                  <form onSubmit={this.handleSubmit}>\n                    <input\n                      aria-label={`${conversation.id}-input`}\n                      id=\"conversation-titles\"\n                      maxLength=\"30\"\n                      placeholder={`${conversation.id}`}\n                      type=\"textarea\"\n                      onClick={(e) => {\n                        this.clickStopper(e);\n                      }}\n                      onBlur={(e) => {\n                        this.frontendRenamer(e);\n                      }}\n                      onKeyPress={(e) => this.handleKeyPress(e)}\n                    ></input>\n                  </form>\n                </div>\n                <div\n                  className=\"column conv-buttons-column\"\n                  onClick={(e) => {\n                    this.clickStopper(e);\n                  }}\n                >\n                  <img\n                    onClick={(e) => {\n                      this.buttonClick(e);\n                    }}\n                    alt=\"star\"\n                    src={`./assets/${star}`}\n                    id=\"star\"\n                    className=\"star-button\"\n                  />\n                  <button\n                    id=\"open\"\n                    onClick={(e) => {\n                      this.openUp(e);\n                    }}\n                    className=\"open-button\"\n                  >\n                    Open\n                  </button>\n                  <button\n                    id=\"delete\"\n                    onClick={(e) => {\n                      this.buttonClick(e);\n                    }}\n                    className=\"delete-button\"\n                  >\n                    Delete\n                  </button>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ConversationList;\n","// This module exposes a singleton WebSocket connection to ShareDB server.\nimport sharedb from \"sharedb/lib/client\";\n\n// Uncomment lines 5 & 6 for use with dev server\n// const host = window.location.host.replace(\"3000\", \"4000\");\n// const webSocket = new WebSocket('ws://' + host);\n\n// Uncomment line 9 for use in deployment\nconst webSocket = new WebSocket(\"wss://ava-backend.herokuapp.com/\");\n\nconst connection = new sharedb.Connection(webSocket);\nexport default connection;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as StringBinding from \"sharedb-string-binding\";\nimport connection from \"../Connection/Connection\";\n\n// If needed, create a new Doc instance\n// for shareDB to communicate with\nfunction createIfNeeded(doc, data, callback) {\n  if (doc.type === null) {\n    return doc.create(data, callback);\n  } else {\n    callback();\n  }\n}\nclass Conversation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleInput = this.handleInput.bind(this);\n    this.textArea = React.createRef();\n  }\n\n  // saves the input to the doc on the\n  // server\n  async textEntered(text, conversation) {\n    const bodyObject = JSON.stringify({ text: text, file: conversation });\n    await fetch(\"https://ava-backend.herokuapp.com/mutations\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n      body: bodyObject,\n      method: \"POST\",\n    });\n  }\n\n  // extracts most recent mutation\n  opHandler(op) {\n    let lastMutation;\n    let targetConversation = this.props.conversations.filter(\n      (c) => c.id === this.props.route\n    );\n    if (Object.keys(op[0]).includes(\"si\")) {\n      lastMutation = `INSERTION @ ${op[0].p}:  ${op[0].si}`;\n    } else if (Object.keys(op[0]).includes(\"sd\")) {\n      lastMutation = `DELETION @ ${op[0].p}:  ${op[0].sd}`;\n    }\n    this.setState({\n      conversations: (targetConversation[0].lastMutation = lastMutation),\n    });\n    const bodyObject = JSON.stringify({\n      mutation: lastMutation,\n      file: targetConversation[0].fileName,\n    });\n    fetch(\"https://ava-backend.herokuapp.com/mutations\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n      body: bodyObject,\n      method: \"PATCH\",\n    });\n  }\n\n  componentDidMount() {\n    // Get a reference to the textArea DOM node.\n    const textArea = ReactDOM.findDOMNode(this.textArea.current);\n    let targetConversation = this.props.conversations.filter(\n      (c) => c.id === this.props.route\n    );\n    let stringData = targetConversation[0].content;\n\n    // Create local Doc instance, mapped\n    // to the current conversation\n    const collection = \"textPads\";\n    const doc = connection.get(\n      collection,\n      `${targetConversation[0].fileName}`\n    );\n\n    // Getting operation details\n    doc.on(\"op\", (op) => {\n      return this.opHandler(op);\n    });\n\n    // subscribe to the server's updates\n    // on the document\n    doc.subscribe(function (err) {\n      if (err) throw err;\n      createIfNeeded(doc, stringData, () => {});\n      const binding = new StringBinding(textArea, doc);\n      binding.setup();\n    });\n  }\n\n  starClick(e) {\n    const conversation = this.props.currentConversation[0].id;\n    this.props.starToggler(conversation);\n  }\n\n  handleInput(e) {\n    const conv = this.props.currentConversation[0].fileName;\n    this.textEntered(e.target.value, conv);\n  }\n\n  render() {\n    const { currentConversation } = this.props;\n    const lastMutation = currentConversation[0].lastMutation;\n\n    // latestMutation is green or red\n    // depending on what it is\n    let spanStyle;\n    if (lastMutation) {\n      if (lastMutation.includes(\"INSERTION\")) {\n        spanStyle = \"#4bcc14\";\n      } else if (lastMutation.includes(\"DELETION\")) {\n        spanStyle = \"#fc845f\";\n      }\n    }\n\n    // star is filled or not,\n    // depending on its status\n    let star;\n    if (localStorage.getItem(`${currentConversation[0].id}-star`)) {\n      star = localStorage.getItem(`${currentConversation[0].id}-star`);\n    } else {\n      star = \"star.svg\";\n    }\n\n    return (\n      <div className=\"container conv-container\">\n        <div className=\"row conv-input-ops-row\">\n          <div className=\"column conv-input-ops-column\">\n            <button\n              onClick={(e) => {\n                this.props.onRouteChange(\"home\");\n              }}\n              id=\"new\"\n              className=\"home-button\"\n            >\n              {\" \"}\n              ←Home\n            </button>\n          </div>\n        </div>\n        <div className=\"column conv-column\">\n          <div className=\"row conv-label-row\">\n            <div className=\"column conv-label-column\">\n              <img\n                onClick={(e) => {\n                  this.starClick(e);\n                }}\n                alt=\"star\"\n                src={`./assets/${star}`}\n                id=\"star\"\n                className=\"star-button\"\n              />\n              <p>{`${currentConversation[0].id}`}</p>\n            </div>\n            <div className=\"column conv-last-mutation-column\">\n              <p className=\"last-mutation\">\n                <span style={{ color: `${spanStyle}` }}>{lastMutation}</span>\n              </p>\n            </div>\n          </div>\n          <div className=\"conv-border\"></div>\n          <div className=\"row conv-row\">\n            <textarea\n              ref={this.textArea}\n              doc={this.doc}\n              defaultValue={currentConversation[0].content}\n              onBlur={this.handleInput}\n              className=\"conv-input\"\n            ></textarea>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Conversation;\n","import React from \"react\";\n\nclass Signature extends React.Component {\n  render() {\n    return (\n      <div\n        className=\"signature\"\n        style={{ display: \"flex\", justifyContent: \"flex-end\" }}\n      >\n        <p className=\"\">\n          A nonsense project by{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://mattseidholz.com\"\n            className=\"sig-link\"\n          >\n            Matt Seidholz\n          </a>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Signature;\n","import React from \"react\";\nimport ConversationList from \"./components/ConversationList/ConversationList\";\nimport Conversation from \"./components/Conversation/Conversation\";\nimport Signature from \"./components/Signature/Signature\";\nimport axios from \"axios/index\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      conversations: [],\n      route: \"home\",\n      lastMutation: [],\n      currentConversation: \"\",\n    };\n  }\n\n  async getConversations() {\n    this.setState({ conversations: [], lastMutation: [] });\n    try {\n      const res = await axios.get(\n        \"https://ava-backend.herokuapp.com/conversations\"\n      );\n      res.data.forEach((i) => {\n        return this.setState({\n          conversations: this.state.conversations.concat(i),\n        });\n      });\n    } catch (e) {\n      return console.log(e);\n    }\n  }\n\n  onRouteChange = (conversation) => {\n    // necessary reloading — to populate\n    // frontend conversations with\n    // any changes we've made\n    if (conversation === \"home\") {\n      this.setState({ currentConversation: \"\" });\n      this.handleUpdate();\n    }\n    return this.setState({\n      route: conversation,\n      currentConversation: this.state.conversations.filter(\n        (c) => c.id === conversation\n      ),\n    });\n  };\n\n  // toggles starred status\n  starToggler = (conversation) => {\n    // filtering the copy, for the conversation\n    // we're trying to star\n    let targetConversation = this.state.conversations.filter(\n      (c) => c.id === conversation\n    );\n    let starStatus;\n    let localStar = localStorage.getItem(`${targetConversation[0].id}-star`);\n\n    if (localStar === \"star-filled.svg\") {\n      starStatus = \"star.svg\";\n    } else {\n      starStatus = \"star-filled.svg\";\n    }\n    localStorage.setItem(`${targetConversation[0].id}-star`, `${starStatus}`);\n    return this.setState({ conversations: this.state.conversations });\n  };\n\n  componentDidMount() {\n    this.getConversations();\n  }\n\n  handleUpdate() {\n    this.getConversations();\n  }\n\n  render() {\n    const { route } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>The Collabatron</h1>\n          {route === \"home\" ? (\n            <ConversationList\n              {...this.state}\n              buttonClick={this.buttonClick}\n              starToggler={this.starToggler}\n              onRouteChange={this.onRouteChange}\n              getConversations={this.getConversations}\n            />\n          ) : (\n            <Conversation\n              {...this.state}\n              starToggler={this.starToggler}\n              buttonClick={this.buttonClick}\n              onRouteChange={this.onRouteChange}\n              opHandler={this.opHandler}\n            />\n          )}\n        </header>\n        <Signature />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}