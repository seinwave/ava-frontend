{"version":3,"sources":["components/ConversationList/ConversationList.js","components/Connection/Connection.js","components/Conversation/Conversation.js","App.js","serviceWorker.js","index.js"],"names":["ConversationList","props","state","targetConversation","value","bodyObject","JSON","stringify","fetch","headers","body","method","e","charCode","preventDefault","this","frontendRenamer","target","console","log","conversations","filter","c","id","placeholder","backendRenamer","file","newConversations","index","indexOf","splice","setState","conversation","star","stopPropagation","fileName","parentElement","firstChild","conversationDeleter","Date","now","push","conversationName","starToggler","onRouteChange","className","onClick","buttonClick","map","i","key","rowClick","onSubmit","handleSubmit","maxLength","type","clickStopper","onBlur","onKeyPress","handleKeyPress","alt","src","React","Component","webSocket","WebSocket","connection","sharedb","Connection","Conversation","handleInput","bind","textArea","createRef","text","op","lastMutation","Object","keys","includes","p","si","sd","ReactDOM","findDOMNode","current","doc","get","route","fetchSnapshot","err","snapshot","on","opHandler","stringData","content","subscribe","data","callback","create","createIfNeeded","binding","StringBinding","setup","textContent","conv","textEntered","spanStyle","currentConversation","length","starClick","style","color","ref","App","handleUpdate","axios","forEach","concat","getConversations","Boolean","window","location","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6195154d.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nclass ConversationList extends React.Component {\n    constructor(props) {\n        super();\n        this.state = {\n            props\n        }\n    }\n\n    // renaming conversations on the backend\n    async backendRenamer(targetConversation, value){\n        const bodyObject = JSON.stringify({\n            \"file\": targetConversation,\n            \"newName\": value})\n        return await fetch('https://ava-backend.herokuapp.com/conversations', {\n            headers: { 'Accept': 'application/json',\n            \"Content-Type\": 'application/json',\n            \"Access-Control-Allow-Origin\": \"*\"},\n            body: bodyObject,\n            method: 'PUT'\n            })\n    }\n\n    // if user presses enter,\n    // proceed to change convo name\n    handleKeyPress(e){\n        if (e.charCode ===13){\n            e.preventDefault();\n            this.frontendRenamer(e)\n        }\n    }\n\n    // changing the convo name\n    // on the frontend\n    frontendRenamer(e) {\n        // IF NO USER INPUT\n        // --> BREAK\n        if (e.target.value === ''){\n            return console.log('no input')\n        }\n        // shallow copy of conversations array\n        let conversations = [...this.props.conversations];\n        \n        // filtering the copy, for the conversation\n        // we're trying to edit\n        let targetConversation = conversations.filter(c => c.id === e.target.placeholder);\n\n        e.target.placeholder = e.target.value + '.txt';\n\n        // firing the rename function, while our\n        // data is freshly targeted\n        this.backendRenamer(targetConversation, e.target.value);\n\n\n        // setting our target conversation's id to\n        // to the new name\n        targetConversation[0].id = e.target.placeholder;\n        return e.target.value = '';\n\n    }\n\n\n    // delete conversations from frontend\n    conversationDeleter(file){\n        // shallow copy of conversations...\n        // ...just in case\n        const newConversations = [...this.props.conversations];\n\n        // filtering the copy, for the conversation\n        // we're trying to delete\n        let targetConversation = newConversations.filter(c => c.id === file);\n\n        // checking if element is in\n        // conversations array\n        const index = newConversations.indexOf(targetConversation[0])\n\n        // mutating the array with a splice\n        this.props.conversations.splice(index,1)\n\n        \n        // using the index to splice\n        // our conversation array\n        this.setState({conversations: \n            this.props.conversations})\n\n    }\n\n     // toggles starred status\n    starToggler(conversation){\n        // filtering the copy, for the conversation\n        // we're trying to star\n        let targetConversation = this.props.conversations.filter(c => c.id === conversation);\n\n        if (targetConversation[0].star){\n            targetConversation[0].star = !targetConversation[0].star;\n        }\n        else {\n            targetConversation[0].star = true;\n        }\n        return this.setState({conversations: this.props.conversations})\n    }\n\n    // prevents clicks from\n    // bubbling up to rowClick event;\n    clickStopper(e){\n        e.stopPropagation();\n    }\n\n    async buttonClick(e) {\n\n        e.stopPropagation();\n    \n        if (e.target.id ===\"delete\"){\n            const fileName = e.target.parentElement.parentElement.firstChild.firstChild[0].placeholder;\n            \n            const bodyObject = JSON.stringify({\"file\": fileName})\n    \n            // reflect deletion in frontend\n            this.conversationDeleter(fileName)\n    \n            return await fetch('https://ava-backend.herokuapp.com/conversations', {\n            headers: { 'Accept': 'application/json',\n            \"Content-Type\": 'application/json',\n            \"Access-Control-Allow-Origin\": \"*\"},\n            body: bodyObject,\n            method: 'DELETE'\n            })\n            \n          }\n    \n        else if (e.target.id === \"new\"){\n    \n            const fileName = \"NewConversation\" + Date.now()\n            console.log(fileName)\n            this.setState({conversations: this.props.conversations.push({\"id\":fileName + '.txt'})})\n            \n            const bodyObject = JSON.stringify({\"file\": fileName})\n            return await fetch('https://ava-backend.herokuapp.com/conversations', {\n            headers: { 'Accept': 'application/json',\n            \"Content-Type\": 'application/json',\n            \"Access-Control-Allow-Origin\": \"*\"},\n            body: bodyObject,\n            method: 'POST'\n            })\n        } \n    \n        else {\n            const conversationName = e.target.parentElement.parentElement.firstChild.firstChild[0].placeholder;\n            return this.starToggler(conversationName);\n        }\n    }\n\n    rowClick(e){\n        \n        const conversation = e.target.firstChild.firstChild.firstChild.placeholder\n\n        return this.props.onRouteChange(conversation)\n        \n    }\n\n\n\n    render() {\n\n        let conversations = this.props.conversations;\n        let star = \"\"\n\n        return (\n            <div className = \"container conv-list-container\">\n                <div className = \"row conv-list-ops-row\">\n                    <div className = \"column conv-list-ops-column\">\n                        <button \n                        onClick = {(e) => {this.buttonClick(e)}}\n                        id = \"new\"\n                        className = \"new-button\">New+</button>\n                    </div>\n                </div>\n                <div className = \"column conv-list-column\">\n                    {conversations.map((conversation,i) => {\n                        if (conversation.star === true){\n                            star = \"star-filled.svg\";\n                        }\n                        else {\n                            star = \"star.svg\";\n                        }\n                        return <div \n                        className = \"row conv-list-row\"\n                        key = {`${i}`}\n                        onClick = {(e) => this.rowClick(e)}>\n                        <div className = \"column conv-title-column\">\n                            <form onSubmit = {this.handleSubmit}>\n                                <input\n                                id = \"conversation-titles\"\n                                maxLength = \"30\"\n                                placeholder = {`${conversation.id}`}\n                                type = \"textarea\"\n                                onClick = {(e) => {this.clickStopper(e)}}\n                                onBlur = {(e) => {this.frontendRenamer(e)}} \n                                onKeyPress = {(e) => this.handleKeyPress(e)}\n                                ></input>\n                            </form>\n                        </div>\n                        <div className = \"column conv-buttons-column\"\n                        onClick = {(e) => {this.clickStopper(e)}}>\n                            <img\n                            onClick = {(e) => {this.buttonClick(e)}}\n                            alt = \"star\"\n                            src = {`./assets/${star}`}\n                            id = \"star\"\n                            className = \"star-button\"/>\n                            <button \n                            id = \"delete\"\n                            onClick = {(e) => {this.buttonClick(e)}}\n                            className = \"delete-button\">Delete</button>\n                        </div>\n                    </div>\n                    })}\n                </div>\n            </div>   \n        )\n    }\n}\n\nexport default ConversationList;","// This module exposes a singleton WebSocket connection to ShareDB server.\nimport sharedb from 'sharedb/lib/client';\n\n// This line enables connecting to ShareDB within the React dev tooling.\n// Our ShareDB server started with `node server.js` runs on port 4000.\n// Our create-react-app dev server started with `npm start` runs on port 3000.\n// This line makes the WebSocket connection always use port 4000.\n// const host = window.location.host.replace(\"3000\", \"4000\");\n\nconst webSocket = new WebSocket('ws://ava-backend.herokuapp.com/');\nconst connection = new sharedb.Connection(webSocket);\nexport default connection;\n","import React  from 'react';\nimport ReactDOM from 'react-dom'\nimport * as StringBinding from 'sharedb-string-binding';\nimport connection from '../Connection/Connection'\n\n// If needed, create a new Doc instance\n// for shareDB to communicate with\nfunction createIfNeeded(doc, data, callback){\n    if(doc.type === null){\n        console.log('File does not exist. Creating a blank.')\n        return doc.create('', callback);\n    } else {\n        console.log('File exists. Populating with:', data)\n        callback();\n    }\n}\nclass Conversation extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.handleInput = this.handleInput.bind(this);\n        this.textArea = React.createRef();\n    }\n    \n\n    // saves the input to the doc on the\n    // server \n    async textEntered(text, conversation) {\n        const bodyObject = JSON.stringify({\"text\":text, \"file\":conversation});\n        await fetch('https://ava-backend.herokuapp.com/mutations', {\n            headers: { 'Accept': 'application/json',\n            \"Content-Type\": 'application/json',\n            \"Access-Control-Allow-Origin\": \"*\"},\n            body: bodyObject,\n            method: 'POST'\n        })\n    \n    }\n\n  // extracts most recent mutation\n  opHandler(op){\n    let lastMutation;\n    if (Object.keys(op[0]).includes('si')){\n        lastMutation = `INSERTION @ ${op[0].p}:  ${op[0].si}`\n    }\n    else if (Object.keys(op[0]).includes('sd')){\n        lastMutation = `DELETION @ ${op[0].p}:  ${op[0].sd}`\n    }\n    return this.setState({lastMutation: this.props.lastMutation.push(lastMutation)})\n}\n\n\n    componentDidMount(){\n        // Get a reference to the textArea DOM node.\n        const textArea = ReactDOM.findDOMNode(this.textArea.current);\n\n        // Create local Doc instance, mapped\n        // to the current conversation\n        const collection = 'textPads';\n        const doc = connection.get(collection, this.props.route);\n\n        \n\n        connection.fetchSnapshot(collection, this.props.route, (err, snapshot) =>{\n            console.log('SNAPSHOT:', snapshot)\n            //return doc.data = snapshot.data\n        })\n\n        // Getting operation details\n        doc.on('op', (op) => {\n            console.log(op);\n            return this.opHandler(op);\n        });\n\n        console.log(\"DOC:\", doc);\n\n        // this over-writes existing content...\n        // not sure why...\n        let targetConversation = this.props.conversations.filter(c => c.id === this.props.route);\n        let stringData = targetConversation[0].content;\n        \n        doc.subscribe(function(err) {\n            if (err) throw err;\n            createIfNeeded(doc, stringData, () => {    \n            }); \n            const binding = new StringBinding(textArea, doc);\n            console.log('BINDING:', binding);\n            binding.setup();\n        });\n        this.doc = doc;\n        \n    }\n\n    starToggler(conversation){\n        // filtering the copy, for the conversation\n        // we're trying to star\n        let targetConversation = this.props.conversations.filter(c => c.id === conversation);\n\n        if (targetConversation[0].star){\n            targetConversation[0].star = !targetConversation[0].star;\n        }\n        else {\n            targetConversation[0].star = true;\n        }\n        return this.setState({conversations: this.props.conversations})\n    }\n\n    starClick(e){\n       const conversation = e.target.parentElement.textContent;\n       this.starToggler(conversation)\n    }\n\n\n    handleInput(e) {\n        const conv = e.target.parentElement.parentElement.firstChild.firstChild.textContent\n        this.textEntered(e.target.value, conv)\n    }\n\n    render() {\n\n        const { route, conversations } = this.props;\n        const currentConversation = conversations.filter(c => c.id === route);\n        const lastMutation = this.props.lastMutation[this.props.lastMutation.length-1];\n\n        let spanStyle;\n        if (lastMutation){\n            if(lastMutation.includes('INSERTION')) {\n                spanStyle = '#4bcc14';\n            }\n            else if (lastMutation.includes('DELETION')) {\n                spanStyle =  '#fc845f';\n            }\n        }\n        let star; \n        if (currentConversation[0].star === true){\n            star = \"star-filled.svg\"\n        }\n        else {star = \"star.svg\"}\n\n        return (\n            <div className = \"container conv-container\">\n                <div className = \"row conv-input-ops-row\">\n                    <div className = \"column conv-input-ops-column\">\n                        <button \n                        onClick = {(e) => {this.props.onRouteChange('home')}}\n                        id = \"new\"\n                        className = \"home-button\"> ←Home</button>\n                    </div>\n                </div>\n                <div className = \"column conv-column\">\n                    <div className = \"row conv-label-row\">\n                        <div className = \"column conv-label-column\">\n                            <img\n                            onClick = {(e) => {this.starClick(e)}}\n                            alt = \"star\"\n                            src = {`./assets/${star}`}\n                            id = \"star\"\n                            className = \"star-button\"/> \n                            <p>{`${currentConversation[0].id}`}</p>\n                        </div>\n                        <div className = \"column conv-last-mutation-column\">\n                            <p className = 'last-mutation'>\n                                <span style = {{color: `${spanStyle}`}}>{lastMutation}</span>\n                            </p>\n                        </div>\n                    </div>\n                    <div className = \"conv-border\"></div>\n                    <div className = \"row conv-row\">\n                        <textarea\n                        ref = {this.textArea}\n                        doc = {this.doc}\n                        onBlur = {this.handleInput}\n                        className = \"conv-input\" \n                        >\n                        </textarea>\n                    </div>\n                    \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Conversation;","import React from 'react';\nimport ConversationList from './components/ConversationList/ConversationList'\nimport Conversation from './components/Conversation/Conversation'\nimport axios from 'axios/index';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n        conversations: [],\n        route: 'home',\n        lastMutation: []\n    }\n  }\n\n\n  async getConversations(){\n    this.setState({conversations: [],\n    lastMutation: []});\n    try {\n      const res = await axios.get('https://ava-backend.herokuapp.com/conversations')\n      res.data.forEach(i => {\n        return this.setState({conversations: this.state.conversations.concat(i) })\n      })\n    }   \n    catch (e) {\n    return console.log(e)\n    }\n  }\n\n\n  onRouteChange = (conversation) =>{\n\n    // necessary reloading — to populate\n    // frontend conversations with\n    // any changes we've made\n    if (conversation === 'home'){\n    this.handleUpdate();\n    }\n       \n    return this.setState({route: conversation}); \n  }\n\n\n  componentDidMount(){\n    this.getConversations();\n  }\n\n\n  handleUpdate(){\n    this.getConversations();\n  }\n\n\n  render(){\n\n    const { route } = this.state; \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>The Collabatron</h1>\n          { route === 'home' ?\n              <ConversationList \n              {...this.state}\n              buttonClick = {this.buttonClick}\n              onRouteChange = {this.onRouteChange}\n              getConversations = {this.getConversations}/> :\n              <Conversation \n              {...this.state}\n              buttonClick = {this.buttonClick}\n              onRouteChange = {this.onRouteChange}\n              opHandler = {this.opHandler} />}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}